package link

import (
	"errors"

	"go/adv-demo/pkg/db"

	"gorm.io/gorm/clause"
)

type LinkRepository struct {
	Database *db.Db
}

func NewLinkRepository(database *db.Db) *LinkRepository {
	return &LinkRepository{
		Database: database,
	}
}

func (repo *LinkRepository) Create(link *Link) (*Link, error) {
	// log.Println("CreateRepository")
	// data , err := repo.GetByHash(link.Hash)

	result := repo.Database.DB.Create(link)
	// log.Println("CreateResult")
	if result.Error != nil {
		return nil, result.Error
	}
	return link, nil
}

func (repo *LinkRepository) GetByHash(hash string) (*Link, error) {
	var link Link

	// repo.Database.DB.First(&Link, "hash = ? OR id = ?", hash, 10)
	result := repo.Database.DB.First(&link, "hash = ?", hash)
	// fmt.Println(result)
	if result.Error != nil {
		return nil, result.Error
	}
	return &link, nil
}

func (repo *LinkRepository) GetByID(id uint) (*Link, error) {
	var link Link

	// repo.Database.DB.First(&Link, "hash = ? OR id = ?", hash, 10)
	result := repo.Database.DB.First(&link, id)
	// fmt.Println(result)
	if result.Error != nil {
		return nil, result.Error
	}
	return &link, nil
}

func (repo *LinkRepository) Update(link *Link) (*Link, error) {
	result := repo.Database.DB.Clauses(clause.Returning{}).Updates(link)
	if result.Error != nil {
		return nil, result.Error
	}
	return link, nil
}

// –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ Gorm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ Delete. –ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —É–¥–∞–ª—è–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ ‚Äî –ø—Ä–∏–º–µ–Ω—è–π Where.

// –ü—Ä–∏–º–µ—Ä:
// go
// repo.Database.DB.Where("is_deleted = ?", true).Delete(&User{})

func (repo *LinkRepository) Delete(id uint) error {
	result := repo.Database.DB.Delete(&Link{}, id)
	if result.Error != nil {
		return result.Error
	}
	if result.RowsAffected == 0 {
		return errors.New("record not found or already deleted")
	}
	return nil
}

// func (repo *LinkRepository) GetByUrl(url string) (*Link, error) {
// 	var link Link

// 	// repo.Database.DB.First(&Link, "hash = ? OR id = ?", hash, 10)
// 	result := repo.Database.DB.Where("url = ?", url).Find(&link)
// 	// result := repo.Database.DB.First(&link, id)
// 	fmt.Println(result)
// 	if result.Error != nil {
// 		return nil, result.Error
// 	}
// 	return &link, nil
// }

// –ö–∞–∫ –≤ GORM –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è?

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:

// db.Where("field = ?", value).Find(&objects)

// üìå –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
// –í GORM –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤:

// db.Where("field = ?", value).Find(&objects)

// Where(...) ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç SQL-—É—Å–ª–æ–≤–∏–µ WHERE
// Find(&objects) ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–∞–π—Å objects
